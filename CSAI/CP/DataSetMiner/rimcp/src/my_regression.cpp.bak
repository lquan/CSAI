/*
 *  Main authors:
 *      Tias Guns <tias.guns@cs.kuleuven.be>
 *      Siegfried Nijssen <siegfried.nijssen@cs.kuleuven.be>
 *
 *  Copyright:
 *      Tias Guns, 2008
 *      Siegfried Nijssen, 2011
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#include "common/regression.hh"
#include <stdlib.h>
#include <iostream>

/// YOU NEED TO MODIFY THIS FILE IN ORDER TO IMPLEMENT A NEW REGRESSION 

Ritemset_Stat statMyRegression ( const BoolVarArray &transactions, const vector<float> &labels ) {
  
  /// THIS FUNCTION NEEDS TO COMPUTE STATISTICS FOR AN ITEMSET BASED ON THE TRANSACTIONS
  /// IT COVERS. 
  Ritemset_Stat stat;
  
  /// In this example, we are only calculating the support. 
  /// Eventually, this code should compute an error function.
  int support = 0;

  
  /// EXAMPLE OF LOOP THROUGH TRANSACTIONS
  for ( int i = 0; i < transactions.size (); ++i ) {
    if ( transactions[i].one () ) {
      /// DO SOMETHING BASED ON labels[i];
      support++;
    }
    else {
      /// transactions[i].zero ()
      /// DO SOMETHING ELSE BASED ON labels[i];
    }
  }
  
  /// ASSIGN stat.prediction - the prediction made for this itemset based on the transactions it covers (for instance, the mean of the covered transactions)
  /// ASSIGN stat.tot - the number of transactions covered by this itemset
  /// ASSIGN stat.value - the error measure calculated for this itemset
  
  stat.tot = support;
  stat.value = support;
  stat.prediction = 0.0;

  return stat;
}

bool propagateMyRegression ( const ViewArray<BoolView> &transactions, const vector<float> &labels, float score ) {
  
  /// THIS FUNCTION NEEDS TO COMPUTE WHETHER, BASED ON THE CURRENT ASSIGNMENTS TO TRANSACTIONS
  /// VARIABLES, THE DESIRED 'SCORE' CAN STILL BE REACHED  
  
  /// ** IT CAN BE ASSUMED THAT THE TRANSACTIONS ARE SORTED IN ORDER OF THEIR LABEL, SMALLEST LABELS FIRST **
  
  /// In this example we essentially compute the maximum support that can still be reached;
  /// hence this is a propagator for the support constraint. 
  int max_reach_support = 0;

  for ( int i = 0; i < transactions.size(); ++i ) 
    if ( transactions[i].assigned () ) 
      /// assigned () MEANS THAT WE KNOW WHETHER THE TRANSACTION IS ZERO OR ONE
      if ( transactions[i].one () ) {
	/// COMPUTE SOMETHING
	max_reach_support++;
      }
      else {
	/// COMPUTE SOMETHING ELSE
      }
    else {
      /// IN THIS CASE BOTH ZERO AND ONE ARE POSSIBLE.
      /// ESSENTIALLY, WE NEED TO DETERMINE WHAT IS THE LOWEST ERROR THAT CAN STILL BE REACHED
      /// WHEN WE DON'T KNOW THE VALUE OF THIS TRANSACTION YET.
      max_reach_support++;
    }

 		     
  /// In the example we check whether the maximal reachable support is high enough.
  return max_reach_support >= score;
}

/// THE FOLLOWING STATEMENT ENSURES THAT THE ABOVE TWO FUNCTIONS ARE KNOWN TO RIMCP
/// "my" IS THE NAME BY WHICH THEY CAN BE SPECIFIED ON THE COMMAND LINE
registerRegression ( "my", statMyRegression, propagateMyRegression );

/// IT IS POSSIBLE TO IMPLEMENT MULTIPLE REGRESSION FUNCTIONS AND BOUNDS FOR THESE FUNCTIONS.
/// IN THIS CASE, DEFINE FURTHER statRegression and propagateRegression FUNCIONS;
/// ADD A registerRegression STATEMENT TO MAKE THEM KNOWN.
